import{_ as d,C as h,c as A,o as t,a8 as p,b as E,j as a,w as i,a as n,G as l,a9 as r}from"./chunks/framework.DW4T_yAZ.js";const D=JSON.parse('{"title":"HTTP 通信层","description":"","frontmatter":{},"headers":[],"relativePath":"projects/LitePan/2-core-architecture/2.3-http-communication-layer.md","filePath":"projects/LitePan/2-core-architecture/2.3-http-communication-layer.md","lastUpdated":1749448992000}'),o={name:"projects/LitePan/2-core-architecture/2.3-http-communication-layer.md"};function k(B,s,c,u,b,g){const e=h("Mermaid");return t(),A("div",null,[s[6]||(s[6]=p('<h1 id="http-通信层" tabindex="-1">HTTP 通信层 <a class="header-anchor" href="#http-通信层" aria-label="Permalink to &quot;HTTP 通信层&quot;">​</a></h1><blockquote><p><strong>相关源文件</strong></p><ul><li><a href="https://github.com/xueldx/%E4%BC%98%E4%BA%AB%E4%BA%91%E7%9B%98-front/blob/3ffecfa5/src/utils/Request.js" target="_blank" rel="noreferrer">src/utils/Request.js</a></li></ul></blockquote><p>本节涵盖了集中式 HTTP 通信系统，该系统处理 优享云盘 应用程序中的所有 API 请求。HTTP 通信层为向后端发送请求提供了统一的接口，具备内置的加载管理、错误处理、认证流程和进度跟踪功能。</p><h2 id="架构概述" tabindex="-1">架构概述 <a class="header-anchor" href="#架构概述" aria-label="Permalink to &quot;架构概述&quot;">​</a></h2><p>HTTP 通信层实现为一个单一模块，它封装了 axios 以为整个应用程序提供增强功能。它充当了前端组件和后端 API 之间的桥梁。</p><h3 id="http-客户端架构" tabindex="-1">HTTP 客户端架构 <a class="header-anchor" href="#http-客户端架构" aria-label="Permalink to &quot;HTTP 客户端架构&quot;">​</a></h3><br>',7)),(t(),E(r,null,{default:i(()=>[l(e,{id:"mermaid-28",class:"mermaid",graph:"flowchart%20TD%0A%0AA%5B%22Main.vue%22%5D%0AB%5B%22Uploader.vue%22%5D%0AC%5B%22Framework.vue%22%5D%0AD%5B%22%E5%85%B1%E4%BA%AB%E7%BB%84%E4%BB%B6%22%5D%0AE%5B%22%E7%AE%A1%E7%90%86%E7%BB%84%E4%BB%B6%22%5D%0AF%5B%22request()%20%E5%87%BD%E6%95%B0%22%5D%0AG%5B%22axios%20%E5%AE%9E%E4%BE%8B%22%5D%0AH%5B%22%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%99%A8%22%5D%0AI%5B%22%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8%22%5D%0AJ%5B%22ElLoading%20%E6%9C%8D%E5%8A%A1%22%5D%0AK%5B%22%E6%B6%88%E6%81%AF%E6%98%BE%E7%A4%BA%22%5D%0AL%5B%22%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA%22%5D%0AM%5B%22%E8%BF%9B%E5%BA%A6%E8%B7%9F%E8%B8%AA%22%5D%0AN%5B%22%2Fapi%2Ffile%2F*%22%5D%0AO%5B%22%2Fapi%2Fadmin%2F*%22%5D%0AP%5B%22%2Fapi%2FshowShare%2F*%22%5D%0AQ%5B%22%2Fapi%2Flogin%22%5D%0A%0A%20%20%20%20A%20--%3E%20F%0A%20%20%20%20B%20--%3E%20F%0A%20%20%20%20C%20--%3E%20F%0A%20%20%20%20D%20--%3E%20F%0A%20%20%20%20E%20--%3E%20F%0A%20%20%20%20H%20--%3E%20J%0A%20%20%20%20I%20--%3E%20K%0A%20%20%20%20I%20--%3E%20L%0A%20%20%20%20F%20--%3E%20M%0A%20%20%20%20G%20--%3E%20N%0A%20%20%20%20G%20--%3E%20O%0A%20%20%20%20G%20--%3E%20P%0A%20%20%20%20G%20--%3E%20Q%0Asubgraph%20Backend_APIs%20%5B%22%E5%90%8E%E7%AB%AF%20API%22%5D%0A%20%20%20%20N%0A%20%20%20%20O%0A%20%20%20%20P%0A%20%20%20%20Q%0Aend%0A%0Asubgraph%20Core_Features%20%5B%22%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%22%5D%0A%20%20%20%20J%0A%20%20%20%20K%0A%20%20%20%20L%0A%20%20%20%20M%0Aend%0A%0Asubgraph%20HTTP_Communication_Layer%20%5B%22HTTP%20%E9%80%9A%E4%BF%A1%E5%B1%82%22%5D%0A%20%20%20%20F%0A%20%20%20%20G%0A%20%20%20%20H%0A%20%20%20%20I%0A%20%20%20%20F%20--%3E%20G%0A%20%20%20%20G%20--%3E%20H%0A%20%20%20%20G%20--%3E%20I%0Aend%0A%0Asubgraph%20Frontend_Components%20%5B%22%E5%89%8D%E7%AB%AF%E7%BB%84%E4%BB%B6%22%5D%0A%20%20%20%20A%0A%20%20%20%20B%0A%20%20%20%20C%0A%20%20%20%20D%0A%20%20%20%20E%0Aend%0A"})]),fallback:i(()=>s[0]||(s[0]=[n(" Loading... ")])),_:1})),s[7]||(s[7]=a("h3",{id:"请求-响应流程",tabindex:"-1"},[n("请求/响应流程 "),a("a",{class:"header-anchor",href:"#请求-响应流程","aria-label":'Permalink to "请求/响应流程"'},"​")],-1)),s[8]||(s[8]=a("br",null,null,-1)),(t(),E(r,null,{default:i(()=>[l(e,{id:"mermaid-33",class:"mermaid",graph:"sequenceDiagram%0A%20%20participant%20Component%0A%20%20participant%20request%0A%20%20participant%20interceptors%0A%20%20participant%20ElLoading%0A%20%20participant%20axios%0A%20%20participant%20Backend%0A%20%20participant%20Message%0A%20%20participant%20router%0A%0A%20%20Component-%3E%3Erequest%3A%20%22%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E9%85%8D%E7%BD%AE%22%0A%20%20request-%3E%3Eaxios%3A%20%22FormData%20%2B%20%E8%AF%B7%E6%B1%82%E5%A4%B4%22%0A%20%20axios-%3E%3Einterceptors%3A%20%22%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%99%A8%22%0A%20%20loop%20%5B%E6%98%BE%E7%A4%BA%E5%8A%A0%E8%BD%BD%E7%8A%B6%E6%80%81%0A%20%20%20%20interceptors-%3E%3EElLoading%3A%20%22ElLoading.service()%22%0A%20%20%20%20axios-%3E%3EBackend%3A%20%22HTTP%20POST%20%E8%AF%B7%E6%B1%82%22%0A%20%20%20%20Backend-%3E%3Eaxios%3A%20%22%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%22%0A%20%20%20%20axios-%3E%3Einterceptors%3A%20%22%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8%22%0A%20%20%20%20interceptors-%3E%3EElLoading%3A%20%22%E5%85%B3%E9%97%AD%E5%8A%A0%E8%BD%BD%E7%8A%B6%E6%80%81%22%0A%20%20%20%20interceptors-%3E%3EComponent%3A%20%22%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%22%0A%20%20%20%20interceptors-%3E%3Erouter%3A%20%22%E8%B7%B3%E8%BD%AC%E5%88%B0%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2('%2Flogin%3FredirectUrl%3D')%22%0A%20%20%20%20interceptors-%3E%3EComponent%3A%20%22%E8%BF%94%E5%9B%9E%E6%8B%92%E7%BB%9D%E7%9A%84%20Promise%22%0A%20%20%20%20interceptors-%3E%3EMessage%3A%20%22%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF%E6%B6%88%E6%81%AF%22%0A%20%20%20%20interceptors-%3E%3EComponent%3A%20%22%E8%BF%94%E5%9B%9E%E6%8B%92%E7%BB%9D%E7%9A%84%20Promise%22%0A%20%20end%0A"})]),fallback:i(()=>s[1]||(s[1]=[n(" Loading... ")])),_:1})),s[9]||(s[9]=p(`<h2 id="核心组件" tabindex="-1">核心组件 <a class="header-anchor" href="#核心组件" aria-label="Permalink to &quot;核心组件&quot;">​</a></h2><h3 id="axios-实例配置" tabindex="-1">Axios 实例配置 <a class="header-anchor" href="#axios-实例配置" aria-label="Permalink to &quot;Axios 实例配置&quot;">​</a></h3><p>HTTP 层基于一个预先配置好的 axios 实例构建，具有特定的默认值：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  baseURL: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  timeout: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><table tabindex="0"><thead><tr><th>配置项</th><th>值</th><th>用途</th></tr></thead><tbody><tr><td><code>baseURL</code></td><td><code>/api</code></td><td>所有请求都以 /api 为前缀</td></tr><tr><td><code>timeout</code></td><td>10 秒</td><td>请求超时限制</td></tr></tbody></table><h3 id="内容类型管理" tabindex="-1">内容类型管理 <a class="header-anchor" href="#内容类型管理" aria-label="Permalink to &quot;内容类型管理&quot;">​</a></h3><p>系统根据请求配置支持多种内容类型：</p><table tabindex="0"><thead><tr><th>内容类型</th><th>变量</th><th>用途</th></tr></thead><tbody><tr><td>表单数据</td><td><code>contentTypeForm</code></td><td>大多数请求的默认类型</td></tr><tr><td>JSON</td><td><code>contentTypeJson</code></td><td>当指定 <code>dataType: &quot;json&quot;</code> 时使用</td></tr></tbody></table><h3 id="请求拦截器" tabindex="-1">请求拦截器 <a class="header-anchor" href="#请求拦截器" aria-label="Permalink to &quot;请求拦截器&quot;">​</a></h3><p>请求拦截器处理加载状态管理：</p>`,10)),(t(),E(r,null,{default:i(()=>[l(e,{id:"mermaid-134",class:"mermaid",graph:"flowchart%20TD%0A%0AA%5B%22%E8%AF%B7%E6%B1%82%E5%BC%80%E5%A7%8B%22%5D%0AB%5B%22%E6%A3%80%E6%9F%A5%20showLoading%22%5D%0AC%5B%22%E5%90%AF%E5%8A%A8%20ElLoading.service()%22%5D%0AD%5B%22%E5%AD%98%E5%82%A8%E5%8A%A0%E8%BD%BD%E7%8A%B6%E6%80%81%E5%BC%95%E7%94%A8%22%5D%0AE%5B%22%E7%BB%A7%E7%BB%AD%E8%AF%B7%E6%B1%82%22%5D%0AF%5B%22%E8%B7%B3%E8%BF%87%E5%8A%A0%E8%BD%BD%E7%8A%B6%E6%80%81%22%5D%0A%0A%20%20%20%20A%20--%3E%20B%0A%20%20%20%20B%20--%3E%20C%0A%20%20%20%20C%20--%3E%20D%0A%20%20%20%20D%20--%3E%20E%0A%20%20%20%20B%20--%3E%20F%0A%20%20%20%20F%20--%3E%20E%0A"})]),fallback:i(()=>s[2]||(s[2]=[n(" Loading... ")])),_:1})),s[10]||(s[10]=a("p",null,"关键功能：",-1)),s[11]||(s[11]=a("ul",null,[a("li",null,[n("当 "),a("code",null,"showLoading: true"),n(" 时激活加载指示器")]),a("li",null,"存储加载状态引用以便清理"),a("li",null,"使用错误消息处理请求失败")],-1)),s[12]||(s[12]=a("h3",{id:"响应拦截器",tabindex:"-1"},[n("响应拦截器 "),a("a",{class:"header-anchor",href:"#响应拦截器","aria-label":'Permalink to "响应拦截器"'},"​")],-1)),s[13]||(s[13]=a("p",null,"响应拦截器提供全面的响应处理：",-1)),(t(),E(r,null,{default:i(()=>[l(e,{id:"mermaid-161",class:"mermaid",graph:"flowchart%20TD%0A%0AA%5B%22%E6%94%B6%E5%88%B0%E5%93%8D%E5%BA%94%22%5D%0AB%5B%22%E5%85%B3%E9%97%AD%E5%8A%A0%E8%BD%BD%E6%8C%87%E7%A4%BA%E5%99%A8%22%5D%0AC%5B%22%E6%A3%80%E6%9F%A5%E5%93%8D%E5%BA%94%E7%B1%BB%E5%9E%8B%22%5D%0AD%5B%22arraybuffer%2Fblob%22%5D%0AE%5B%22%E8%BF%94%E5%9B%9E%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE%22%5D%0AF%5B%22JSON%20%E5%93%8D%E5%BA%94%22%5D%0AG%5B%22%E6%A3%80%E6%9F%A5%E7%8A%B6%E6%80%81%E7%A0%81%22%5D%0AH%5B%22%E7%8A%B6%E6%80%81%E7%A0%81%20%3D%3D%20200%22%5D%0AI%5B%22%E8%BF%94%E5%9B%9E%E6%88%90%E5%8A%9F%E6%95%B0%E6%8D%AE%22%5D%0AJ%5B%22%E7%8A%B6%E6%80%81%E7%A0%81%20%3D%3D%20901%22%5D%0AK%5B%22%E8%AE%A4%E8%AF%81%E8%B6%85%E6%97%B6%22%5D%0AL%5B%22%E8%B7%B3%E8%BD%AC%E5%88%B0%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%22%5D%0AM%5B%22%E8%BF%94%E5%9B%9E%E6%8B%92%E7%BB%9D%E7%9A%84%20Promise%22%5D%0AN%5B%22%E5%85%B6%E4%BB%96%E9%94%99%E8%AF%AF%E7%A0%81%22%5D%0AO%5B%22%E6%89%A7%E8%A1%8C%E9%94%99%E8%AF%AF%E5%9B%9E%E8%B0%83%22%5D%0AP%5B%22%E8%BF%94%E5%9B%9E%E6%8B%92%E7%BB%9D%E7%9A%84%20Promise%22%5D%0A%0A%20%20%20%20A%20--%3E%20B%0A%20%20%20%20B%20--%3E%20C%0A%20%20%20%20C%20--%3E%20D%0A%20%20%20%20D%20--%3E%20E%0A%20%20%20%20C%20--%3E%20F%0A%20%20%20%20F%20--%3E%20G%0A%20%20%20%20G%20--%3E%20H%0A%20%20%20%20H%20--%3E%20I%0A%20%20%20%20G%20--%3E%20J%0A%20%20%20%20J%20--%3E%20K%0A%20%20%20%20K%20--%3E%20L%0A%20%20%20%20L%20--%3E%20M%0A%20%20%20%20G%20--%3E%20N%0A%20%20%20%20N%20--%3E%20O%0A%20%20%20%20O%20--%3E%20P%0A"})]),fallback:i(()=>s[3]||(s[3]=[n(" Loading... ")])),_:1})),s[14]||(s[14]=p('<h2 id="请求函数接口" tabindex="-1">请求函数接口 <a class="header-anchor" href="#请求函数接口" aria-label="Permalink to &quot;请求函数接口&quot;">​</a></h2><h3 id="函数签名" tabindex="-1">函数签名 <a class="header-anchor" href="#函数签名" aria-label="Permalink to &quot;函数签名&quot;">​</a></h3><p>主 <code>request()</code> 函数接受一个配置对象，包含以下参数：</p><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>url</code></td><td>字符串</td><td>必需</td><td>API 端点路径</td></tr><tr><td><code>params</code></td><td>对象</td><td>null</td><td>请求参数</td></tr><tr><td><code>dataType</code></td><td>字符串</td><td>&quot;form&quot;</td><td>&quot;json&quot; 表示 JSON 内容类型</td></tr><tr><td><code>showLoading</code></td><td>布尔值</td><td>true</td><td>启用加载指示器</td></tr><tr><td><code>responseType</code></td><td>字符串</td><td>&quot;json&quot;</td><td>预期的响应格式</td></tr><tr><td><code>errorCallback</code></td><td>函数</td><td>null</td><td>自定义错误处理函数</td></tr><tr><td><code>showError</code></td><td>布尔值</td><td>true</td><td>显示错误消息</td></tr><tr><td><code>uploadProgressCallback</code></td><td>函数</td><td>null</td><td>上传进度处理函数</td></tr></tbody></table><h3 id="参数处理" tabindex="-1">参数处理 <a class="header-anchor" href="#参数处理" aria-label="Permalink to &quot;参数处理&quot;">​</a></h3><p>该函数默认将参数转换为 <code>FormData</code> 格式：</p>',6)),(t(),E(r,null,{default:i(()=>[l(e,{id:"mermaid-309",class:"mermaid",graph:"flowchart%20TD%0A%0AA%5B%22%E8%BE%93%E5%85%A5%E5%8F%82%E6%95%B0%22%5D%0AB%5B%22%E5%88%9B%E5%BB%BA%20FormData()%22%5D%0AC%5B%22%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E9%94%AE%22%5D%0AD%5B%22formData.append()%22%5D%0AE%5B%22%E5%A4%84%E7%90%86%E6%9C%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%80%BC%22%5D%0AF%5B%22%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%22%5D%0A%0A%20%20%20%20A%20--%3E%20B%0A%20%20%20%20B%20--%3E%20C%0A%20%20%20%20C%20--%3E%20D%0A%20%20%20%20D%20--%3E%20E%0A%20%20%20%20E%20--%3E%20F%0A"})]),fallback:i(()=>s[4]||(s[4]=[n(" Loading... ")])),_:1})),s[15]||(s[15]=p(`<h2 id="错误处理系统" tabindex="-1">错误处理系统 <a class="header-anchor" href="#错误处理系统" aria-label="Permalink to &quot;错误处理系统&quot;">​</a></h2><h3 id="错误类型和响应" tabindex="-1">错误类型和响应 <a class="header-anchor" href="#错误类型和响应" aria-label="Permalink to &quot;错误类型和响应&quot;">​</a></h3><table tabindex="0"><thead><tr><th>错误码</th><th>场景</th><th>操作</th></tr></thead><tbody><tr><td>200</td><td>成功</td><td>返回响应数据</td></tr><tr><td>901</td><td>认证超时</td><td>重定向到登录页面</td></tr><tr><td>其他</td><td>各种错误</td><td>显示错误消息</td></tr><tr><td>网络错误</td><td>请求失败</td><td>显示 &quot;网络异常&quot;</td></tr></tbody></table><h3 id="认证流程" tabindex="-1">认证流程 <a class="header-anchor" href="#认证流程" aria-label="Permalink to &quot;认证流程&quot;">​</a></h3><p>当认证过期（错误码 901）时，系统会：</p><ol><li>使用当前路径构建重定向 URL</li><li>导航到登录页面：<code>/login?redirectUrl=&lt;编码后的路径&gt;</code></li><li>返回拒绝的 Promise 以防止进一步处理</li></ol><h2 id="加载管理" tabindex="-1">加载管理 <a class="header-anchor" href="#加载管理" aria-label="Permalink to &quot;加载管理&quot;">​</a></h2><h3 id="elloading-集成" tabindex="-1">ElLoading 集成 <a class="header-anchor" href="#elloading-集成" aria-label="Permalink to &quot;ElLoading 集成&quot;">​</a></h3><p>加载系统使用 Element Plus 的加载服务：</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">loading = ElLoading.service({</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;加载中……&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rgba(0,0,0,0.7)&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>加载生命周期：</p><ul><li><strong>开始</strong>：当 <code>showLoading: true</code> 时，在请求拦截器中激活</li><li><strong>结束</strong>：在响应拦截器或错误处理程序中关闭</li><li><strong>清理</strong>：将引用置为 null 以防止内存泄漏</li></ul><h2 id="上传进度跟踪" tabindex="-1">上传进度跟踪 <a class="header-anchor" href="#上传进度跟踪" aria-label="Permalink to &quot;上传进度跟踪&quot;">​</a></h2><h3 id="进度回调系统" tabindex="-1">进度回调系统 <a class="header-anchor" href="#进度回调系统" aria-label="Permalink to &quot;进度回调系统&quot;">​</a></h3><p>API 请求系统内置了对文件上传进度跟踪的支持，系统通过 axios 的 <code>onUploadProgress</code> 提供进度跟踪,这对于应用程序中的文件上传功能尤为重要。</p>`,15)),(t(),E(r,null,{default:i(()=>[l(e,{id:"mermaid-439",class:"mermaid",graph:"sequenceDiagram%0A%20%20participant%20UploaderComponent%0A%20%20participant%20request()%0A%20%20participant%20AxiosInstance%0A%20%20participant%20BrowserXHR%0A%20%20participant%20BackendAPI%0A%0A%20%20UploaderComponent-%3E%3Erequest()%3A%20%E6%90%BA%E5%B8%A6%E4%B8%8A%E4%BC%A0%E8%BF%9B%E5%BA%A6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%0A%20%20request()-%3E%3EAxiosInstance%3A%20%E9%85%8D%E7%BD%AE%20onUploadProgress%0A%20%20AxiosInstance-%3E%3EBrowserXHR%3A%20%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B8%A6%E6%9C%89%E8%BF%9B%E5%BA%A6%E7%9B%91%E5%90%AC%E5%99%A8%E7%9A%84%20XHR%0A%20%20BrowserXHR-%3E%3EBackendAPI%3A%20%E5%BC%80%E5%A7%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%0A%20%20loop%20%5B%E6%AF%8F%E6%AC%A1%E8%BF%9B%E5%BA%A6%E4%BA%8B%E4%BB%B6%5D%0A%20%20%20%20BrowserXHR-%3E%3EAxiosInstance%3A%20%E8%BF%9B%E5%BA%A6%E4%BA%8B%E4%BB%B6%EF%BC%88%E5%B7%B2%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E6%95%B0%2F%E6%80%BB%E5%AD%97%E8%8A%82%E6%95%B0%EF%BC%89%0A%20%20%20%20AxiosInstance-%3E%3Erequest()%3A%20%E8%B0%83%E7%94%A8%20onUploadProgress%0A%20%20%20%20request()-%3E%3EUploaderComponent%3A%20%E8%B0%83%E7%94%A8%E4%B8%8A%E4%BC%A0%E8%BF%9B%E5%BA%A6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%0A%20%20%20%20UploaderComponent-%3E%3EUploaderComponent%3A%20%E6%A0%B9%E6%8D%AE%E8%BF%9B%E5%BA%A6%E6%9B%B4%E6%96%B0%20UI%0A%20%20end%0A%20%20BackendAPI--%3E%3EBrowserXHR%3A%20%E4%B8%8A%E4%BC%A0%E5%AE%8C%E6%88%90%0A%20%20BrowserXHR--%3E%3EAxiosInstance%3A%20%E8%AF%B7%E6%B1%82%E5%AE%8C%E6%88%90%0A%20%20AxiosInstance--%3E%3Erequest()%3A%20%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%0A%20%20request()--%3E%3EUploaderComponent%3A%20%E5%A4%84%E7%90%86%E5%90%8E%E7%9A%84%E7%BB%93%E6%9E%9C%0A"})]),fallback:i(()=>s[5]||(s[5]=[n(" Loading... ")])),_:1})),s[16]||(s[16]=p(`<div class="info custom-block"><p class="custom-block-title">进度事件包含：</p><ul><li><code>loaded</code>：到目前为止已上传的字节数</li><li><code>total</code>：要上传的总字节数</li><li>用于 UI 更新的计算百分比</li></ul></div><h2 id="集成模式" tabindex="-1">集成模式 <a class="header-anchor" href="#集成模式" aria-label="Permalink to &quot;集成模式&quot;">​</a></h2><h3 id="常见使用模式" tabindex="-1">常见使用模式 <a class="header-anchor" href="#常见使用模式" aria-label="Permalink to &quot;常见使用模式&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">组件通常按以下方式使用请求函数：</p><ol><li>导入请求模块</li><li>配置请求参数</li><li>处理响应或错误</li><li>更新组件状态</li></ol><p><strong>这种集中式方法确保了以下方面的一致性</strong>：</p><ul><li>整个应用程序的错误处理</li><li>加载状态管理</li><li>认证流程</li><li>上传进度跟踪</li></ul></div><h3 id="使用示例-文件上传" tabindex="-1">使用示例：文件上传 <a class="header-anchor" href="#使用示例-文件上传" aria-label="Permalink to &quot;使用示例：文件上传&quot;">​</a></h3><p>API 请求系统在文件上传过程中得到了充分应用，它可以处理分块上传并跟踪进度：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 来自 Uploader.vue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uploadResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proxy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: api.upload,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  params: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    file: chunkFile,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fileId: currentFile.fileId,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filePid: currentFile.filePid,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fileName: currentFile.fileName,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fileMd5: currentFile.md5,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chunkIndex: i,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chunks: chunks,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  showLoading: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dataType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  showError: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  errorCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">errorMsg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    currentFile.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> STATUS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.fail.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    currentFile.errorMsg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errorMsg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  uploadProgressCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loaded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.loaded</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (loaded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileSize) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      loaded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileSize</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    currentFile.uploadSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chunkSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loaded</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    currentFile.uploadProgress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((currentFile.uploadSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileSize) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><div class="info custom-block"><p class="custom-block-title">在这个示例中：</p><p>上传过程将文件分块发送到服务器。 跟踪进度并在 UI 中更新。 实现了自定义错误处理。 分块上传时禁用了加载指示器。</p></div>`,8))])}const m=d(o,[["render",k]]);export{D as __pageData,m as default};
