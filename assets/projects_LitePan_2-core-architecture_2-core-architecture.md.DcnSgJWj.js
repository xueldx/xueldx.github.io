import{_ as s,C as u,c as i,o as r,a8 as o,b as A,w as t,a as d,G as E,a9 as n}from"./chunks/framework.DW4T_yAZ.js";const R=JSON.parse('{"title":"核心架构","description":"","frontmatter":{},"headers":[],"relativePath":"projects/LitePan/2-core-architecture/2-core-architecture.md","filePath":"projects/LitePan/2-core-architecture/2-core-architecture.md","lastUpdated":1749448992000}'),B={name:"projects/LitePan/2-core-architecture/2-core-architecture.md"};function c(l,e,h,p,m,D){const a=u("Mermaid");return r(),i("div",null,[e[5]||(e[5]=o('<h1 id="核心架构" tabindex="-1">核心架构 <a class="header-anchor" href="#核心架构" aria-label="Permalink to &quot;核心架构&quot;">​</a></h1><p>本节介绍驱动 优享云盘 云存储应用程序的核心架构。核心架构由三个主要部分组成：应用框架层、路由系统和 HTTP 通信层。这些系统协同工作，为所有文件管理、用户认证和管理功能构建了结构基础。</p><h2 id="系统概述" tabindex="-1">系统概述 <a class="header-anchor" href="#系统概述" aria-label="Permalink to &quot;系统概述&quot;">​</a></h2><p>核心架构采用分层方法，其中 <code>Framework.vue</code> 组件作为主要协调器，在路由系统和 HTTP 通信层之间进行协调，以提供连贯的用户体验。</p><h3 id="核心架构组件" tabindex="-1">核心架构组件 <a class="header-anchor" href="#核心架构组件" aria-label="Permalink to &quot;核心架构组件&quot;">​</a></h3><br>',6)),(r(),A(n,null,{default:t(()=>[E(a,{id:"mermaid-16",class:"mermaid",graph:"flowchart%20TD%0AFramework%5B%22Framework.vue%3Cbr%3E%E4%B8%BB%E5%BA%94%E7%94%A8%E5%A4%96%E5%A3%B3%22%5D%0ARouter%5B%22router%2Findex.js%3Cbr%3E%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%22%5D%0ARequest%5B%22utils%2FRequest.js%3Cbr%3EHTTP%20%E5%AE%A2%E6%88%B7%E7%AB%AF%22%5D%0AUserAuth%5B%22%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81%E7%8A%B6%E6%80%81%22%5D%0AMenuSystem%5B%22%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95%E7%B3%BB%E7%BB%9F%22%5D%0ASpaceTracking%5B%22%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E8%B7%9F%E8%B8%AA%22%5D%0ALayoutMgmt%5B%22%E5%B8%83%E5%B1%80%E7%AE%A1%E7%90%86%22%5D%0ARouteGuards%5B%22%E8%AE%A4%E8%AF%81%E5%AE%88%E5%8D%AB%22%5D%0ARouteMapping%5B%22%E8%B7%AF%E5%BE%84%E5%88%B0%E7%BB%84%E4%BB%B6%E6%98%A0%E5%B0%84%22%5D%0AMetaHandling%5B%22%E8%B7%AF%E7%94%B1%E5%85%83%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%22%5D%0AHttpInterceptors%5B%22%E8%AF%B7%E6%B1%82%2F%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8%22%5D%0ALoadingMgmt%5B%22%E5%8A%A0%E8%BD%BD%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%22%5D%0AErrorHandling%5B%22%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%22%5D%0AAuthTimeout%5B%22%E8%AE%A4%E8%AF%81%E8%B6%85%E6%97%B6%22%5D%0A%0A%20%20%20%20Framework%20--%3E%20UserAuth%0A%20%20%20%20Framework%20--%3E%20MenuSystem%0A%20%20%20%20Framework%20--%3E%20SpaceTracking%0A%20%20%20%20Framework%20--%3E%20LayoutMgmt%0A%20%20%20%20Router%20--%3E%20RouteGuards%0A%20%20%20%20Router%20--%3E%20RouteMapping%0A%20%20%20%20Router%20--%3E%20MetaHandling%0A%20%20%20%20Request%20--%3E%20HttpInterceptors%0A%20%20%20%20Request%20--%3E%20LoadingMgmt%0A%20%20%20%20Request%20--%3E%20ErrorHandling%0A%20%20%20%20Request%20--%3E%20AuthTimeout%0Asubgraph%20Request_Responsibilities%20%5B%22%E8%AF%B7%E6%B1%82%E8%81%8C%E8%B4%A3%22%5D%0A%20%20%20%20HttpInterceptors%0A%20%20%20%20LoadingMgmt%0A%20%20%20%20ErrorHandling%0A%20%20%20%20AuthTimeout%0Aend%0A%0Asubgraph%20Router_Responsibilities%20%5B%22%E8%B7%AF%E7%94%B1%E8%81%8C%E8%B4%A3%22%5D%0A%20%20%20%20RouteGuards%0A%20%20%20%20RouteMapping%0A%20%20%20%20MetaHandling%0Aend%0A%0Asubgraph%20Framework_Responsibilities%20%5B%22%E6%A1%86%E6%9E%B6%E8%81%8C%E8%B4%A3%22%5D%0A%20%20%20%20UserAuth%0A%20%20%20%20MenuSystem%0A%20%20%20%20SpaceTracking%0A%20%20%20%20LayoutMgmt%0Aend%0A%0Asubgraph%20Application_Layer%20%5B%22%E5%BA%94%E7%94%A8%E5%B1%82%22%5D%0A%20%20%20%20Framework%0A%20%20%20%20Router%0A%20%20%20%20Request%0A%20%20%20%20Framework%20--%3E%20Router%0A%20%20%20%20Framework%20--%3E%20Request%0A%20%20%20%20Router%20--%3E%20Request%0Aend%0A"})]),fallback:t(()=>e[0]||(e[0]=[d(" Loading... ")])),_:1})),e[6]||(e[6]=o('<h2 id="应用框架层" tabindex="-1">应用框架层 <a class="header-anchor" href="#应用框架层" aria-label="Permalink to &quot;应用框架层&quot;">​</a></h2><p><code>Framework.vue</code> 组件作为主应用容器，实现了一个复杂的布局系统，用于管理用户认证、导航和核心应用功能。</p><h3 id="框架组件结构" tabindex="-1">框架组件结构 <a class="header-anchor" href="#框架组件结构" aria-label="Permalink to &quot;框架组件结构&quot;">​</a></h3><table tabindex="0"><thead><tr><th>组件部分</th><th>用途</th><th>关键特性</th></tr></thead><tbody><tr><td>头部</td><td>应用程序品牌标识和用户控件</td><td>徽标、上传触发器、用户下拉菜单</td></tr><tr><td>左侧边栏</td><td>导航系统</td><td>主菜单、子菜单、空间使用情况显示</td></tr><tr><td>主体内容</td><td>动态内容区域</td><td>带有组件通信的路由视图</td></tr></tbody></table><h3 id="用户认证集成" tabindex="-1">用户认证集成 <a class="header-anchor" href="#用户认证集成" aria-label="Permalink to &quot;用户认证集成&quot;">​</a></h3><p>框架通过基于 cookie 的认证来维护用户状态，<code>userInfo</code> 响应式引用存储用户详细信息和管理员权限。</p>',6)),(r(),A(n,null,{default:t(()=>[E(a,{id:"mermaid-82",class:"mermaid",graph:"flowchart%20TD%0A%0ACookieCheck%5B%22VueCookies.get('userInfo')%22%5D%0AUserInfo%5B%22userInfo%20%E5%BC%95%E7%94%A8%22%5D%0AAdminCheck%5B%22userInfo.admin%22%5D%0AMenuFilter%5B%22filteredMenus%20%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%22%5D%0AUpdateAvatar%5B%22showUpdateAvatar()%22%5D%0AUpdatePassword%5B%22showUpdatePassword()%22%5D%0ALogout%5B%22logout()%22%5D%0AMenusArray%5B%22menus%20%E6%95%B0%E7%BB%84%22%5D%0ACurrentMenu%5B%22currentMenu%20%E5%BC%95%E7%94%A8%22%5D%0AMenuJump%5B%22jump()%20%E6%96%B9%E6%B3%95%22%5D%0A%0A%20%20%20%20MenuFilter%20--%3E%20MenusArray%0A%20%20%20%20UserInfo%20--%3E%20UpdateAvatar%0A%20%20%20%20UserInfo%20--%3E%20UpdatePassword%0A%20%20%20%20UserInfo%20--%3E%20Logout%0Asubgraph%20Menu_System%20%5B%22%E8%8F%9C%E5%8D%95%E7%B3%BB%E7%BB%9F%22%5D%0A%20%20%20%20MenusArray%0A%20%20%20%20CurrentMenu%0A%20%20%20%20MenuJump%0A%20%20%20%20MenusArray%20--%3E%20CurrentMenu%0A%20%20%20%20CurrentMenu%20--%3E%20MenuJump%0Aend%0A%0Asubgraph%20User_Actions%20%5B%22%E7%94%A8%E6%88%B7%E6%93%8D%E4%BD%9C%22%5D%0A%20%20%20%20UpdateAvatar%0A%20%20%20%20UpdatePassword%0A%20%20%20%20Logout%0Aend%0A%0Asubgraph%20Framework_Authentication_Flow%20%5B%22%E6%A1%86%E6%9E%B6%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%22%5D%0A%20%20%20%20CookieCheck%0A%20%20%20%20UserInfo%0A%20%20%20%20AdminCheck%0A%20%20%20%20MenuFilter%0A%20%20%20%20CookieCheck%20--%3E%20UserInfo%0A%20%20%20%20UserInfo%20--%3E%20AdminCheck%0A%20%20%20%20AdminCheck%20--%3E%20MenuFilter%0Aend%0A"})]),fallback:t(()=>e[1]||(e[1]=[d(" Loading... ")])),_:1})),e[7]||(e[7]=o('<h3 id="导航菜单系统" tabindex="-1">导航菜单系统 <a class="header-anchor" href="#导航菜单系统" aria-label="Permalink to &quot;导航菜单系统&quot;">​</a></h3><p>框架实现了一个具有基于角色访问控制的分层菜单系统。<code>menus</code> 数组定义了完整的导航结构，而 <code>filteredMenus</code> 提供了适合角色的菜单过滤。</p><p><strong>菜单配置结构：</strong></p><ul><li><code>menuCode</code>：用于菜单匹配的唯一标识符</li><li><code>path</code>：导航的路由路径</li><li><code>allShow</code>：普通用户可见性的布尔值</li><li><code>children</code>：子菜单项数组</li></ul><p><code>setMenu()</code> 函数和路由监听器确保菜单状态与当前路由正确同步。</p><h3 id="存储空间管理" tabindex="-1">存储空间管理 <a class="header-anchor" href="#存储空间管理" aria-label="Permalink to &quot;存储空间管理&quot;">​</a></h3><p>框架通过 <code>useSpaceInfo</code> 响应式对象和 <code>getUseSpace()</code> API 调用实现了实时存储空间跟踪。去抖动的刷新机制可防止过多的 API 调用，同时为用户提供及时的反馈。</p><h2 id="路由系统" tabindex="-1">路由系统 <a class="header-anchor" href="#路由系统" aria-label="Permalink to &quot;路由系统&quot;">​</a></h2><p><code>router/index.js</code> 中的路由系统使用 Vue Router 实现，带有认证守卫和分层路由组织。路由配置支持在主 <code>Framework</code> 组件下的嵌套路由。</p><h3 id="路由结构和认证" tabindex="-1">路由结构和认证 <a class="header-anchor" href="#路由结构和认证" aria-label="Permalink to &quot;路由结构和认证&quot;">​</a></h3>',10)),(r(),A(n,null,{default:t(()=>[E(a,{id:"mermaid-132",class:"mermaid",graph:"flowchart%20TD%0A%0ABeforeEach%5B%22router.beforeEach()%22%5D%0ANeedLogin%5B%22meta.needLogin%20%E6%A3%80%E6%9F%A5%22%5D%0AUserInfo%5B%22VueCookies.get('userInfo')%22%5D%0ARedirectLogin%5B%22router.push('%2Flogin')%22%5D%0ARoot%5B%22%2F%22%5D%0AFramework%5B%22Framework.vue%22%5D%0AMainRoutes%5B%22%E4%B8%BB%E6%96%87%E4%BB%B6%E8%B7%AF%E7%94%B1%3Cbr%3E%2Fmain%2F%3Acategory%22%5D%0AShareRoutes%5B%22%E5%85%B1%E4%BA%AB%E8%B7%AF%E7%94%B1%3Cbr%3E%2Fmyshare%22%5D%0ARecycleRoutes%5B%22%E5%9B%9E%E6%94%B6%E7%AB%99%E8%B7%AF%E7%94%B1%3Cbr%3E%2Frecycle%22%5D%0AAdminRoutes%5B%22%E7%AE%A1%E7%90%86%E8%B7%AF%E7%94%B1%3Cbr%3E%2Fsettings%2F*%22%5D%0APublicShare%5B%22%2Fshare%2F%3AshareId%22%5D%0AShareCheck%5B%22%2FshareCheck%2F%3AshareId%22%5D%0ANotFound%5B%22404%20%E8%B7%AF%E7%94%B1%22%5D%0A%0A%20%20%20%20Root%20--%3E%20Framework%0A%20%20%20%20Framework%20--%3E%20MainRoutes%0Asubgraph%20Route_Guards%20%5B%22%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB%22%5D%0A%20%20%20%20BeforeEach%0A%20%20%20%20NeedLogin%0A%20%20%20%20UserInfo%0A%20%20%20%20RedirectLogin%0A%20%20%20%20Root%0A%20%20%20%20MainRoutes%0A%20%20%20%20BeforeEach%20--%3E%20NeedLogin%0A%20%20%20%20NeedLogin%20--%3E%20UserInfo%0A%20%20%20%20UserInfo%20--%3E%20RedirectLogin%0Aend%0A%0Asubgraph%20Route_Hierarchy%20%5B%22%E8%B7%AF%E7%94%B1%E5%B1%82%E7%BA%A7%22%5D%0A%20%20%20%20Framework%0A%20%20%20%20ShareRoutes%0A%20%20%20%20RecycleRoutes%0A%20%20%20%20AdminRoutes%0A%20%20%20%20Login%0A%20%20%20%20PublicShare%0A%20%20%20%20ShareCheck%0A%20%20%20%20NotFound%0A%20%20%20%20Framework%20--%3E%20ShareRoutes%0A%20%20%20%20Framework%20--%3E%20RecycleRoutes%0A%20%20%20%20Framework%20--%3E%20AdminRoutes%0A%20%20%20%20Login%20--%3E%20Framework%0A%20%20%20%20PublicShare%20--%3E%20ShareCheck%0Aend%0A"})]),fallback:t(()=>e[2]||(e[2]=[d(" Loading... ")])),_:1})),e[8]||(e[8]=o('<h3 id="路由元数据系统" tabindex="-1">路由元数据系统 <a class="header-anchor" href="#路由元数据系统" aria-label="Permalink to &quot;路由元数据系统&quot;">​</a></h3><p>每个受保护的路由都包含用于正确导航和安全的元数据：</p><table tabindex="0"><thead><tr><th>路由路径</th><th>组件</th><th>menuCode</th><th>用途</th></tr></thead><tbody><tr><td><code>/main/:category</code></td><td><code>Main.vue</code></td><td><code>main</code></td><td>按类别浏览文件</td></tr><tr><td><code>/myshare</code></td><td><code>Share.vue</code></td><td><code>share</code></td><td>用户的共享文件</td></tr><tr><td><code>/recycle</code></td><td><code>Recycle.vue</code></td><td><code>recycle</code></td><td>恢复已删除的文件</td></tr><tr><td><code>/settings/*</code></td><td>管理组件</td><td><code>settings</code></td><td>管理功能</td></tr></tbody></table><p><code>menuCode</code> 元数据使 Framework 组件能够通过路由监听器机制突出显示正确的导航菜单项。</p><h2 id="http-通信层" tabindex="-1">HTTP 通信层 <a class="header-anchor" href="#http-通信层" aria-label="Permalink to &quot;HTTP 通信层&quot;">​</a></h2><p><code>Request.js</code> 工具提供了一个基于 Axios 构建的集中式 HTTP 客户端，支持全面的拦截器、加载管理和错误处理。</p><h3 id="请求-响应管道" tabindex="-1">请求/响应管道 <a class="header-anchor" href="#请求-响应管道" aria-label="Permalink to &quot;请求/响应管道&quot;">​</a></h3>',7)),(r(),A(n,null,{default:t(()=>[E(a,{id:"mermaid-227",class:"mermaid",graph:"flowchart%20TD%0A%0AConfigInput%5B%22%E8%AF%B7%E6%B1%82%E9%85%8D%E7%BD%AE%22%5D%0ARequestInterceptor%5B%22%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%99%A8%22%5D%0ALoadingStart%5B%22ElLoading.service()%22%5D%0AAxiosPost%5B%22instance.post()%22%5D%0AAxiosResponse%5B%22Axios%20%E5%93%8D%E5%BA%94%22%5D%0AResponseInterceptor%5B%22%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8%22%5D%0ALoadingStop%5B%22loading.close()%22%5D%0AResponseCheck%5B%22%E4%BB%A3%E7%A0%81%E9%AA%8C%E8%AF%81%22%5D%0ACode901%5B%22%E4%BB%A3%E7%A0%81%20901%3A%20%E8%AE%A4%E8%AF%81%E8%B6%85%E6%97%B6%22%5D%0ARouterPush%5B%22router.push('%2Flogin')%22%5D%0AErrorCallback%5B%22errorCallback()%22%5D%0AMessageError%5B%22Message.error()%22%5D%0A%0A%20%20%20%20AxiosPost%20--%3E%20AxiosResponse%0A%20%20%20%20ResponseCheck%20--%3E%20Code901%0A%20%20%20%20ResponseCheck%20--%3E%20ErrorCallback%0Asubgraph%20Error_Handling%20%5B%22%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%22%5D%0A%20%20%20%20Code901%0A%20%20%20%20RouterPush%0A%20%20%20%20ErrorCallback%0A%20%20%20%20MessageError%0A%20%20%20%20Code901%20--%3E%20RouterPush%0A%20%20%20%20ErrorCallback%20--%3E%20MessageError%0Aend%0A%0Asubgraph%20Response_Flow%20%5B%22%E5%93%8D%E5%BA%94%E6%B5%81%E7%A8%8B%22%5D%0A%20%20%20%20AxiosResponse%0A%20%20%20%20ResponseInterceptor%0A%20%20%20%20LoadingStop%0A%20%20%20%20ResponseCheck%0A%20%20%20%20AxiosResponse%20--%3E%20ResponseInterceptor%0A%20%20%20%20ResponseInterceptor%20--%3E%20LoadingStop%0A%20%20%20%20LoadingStop%20--%3E%20ResponseCheck%0Aend%0A%0Asubgraph%20Request_Flow%20%5B%22%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%22%5D%0A%20%20%20%20ConfigInput%0A%20%20%20%20RequestInterceptor%0A%20%20%20%20LoadingStart%0A%20%20%20%20AxiosPost%0A%20%20%20%20ConfigInput%20--%3E%20RequestInterceptor%0A%20%20%20%20RequestInterceptor%20--%3E%20LoadingStart%0A%20%20%20%20LoadingStart%20--%3E%20AxiosPost%0Aend%0A"})]),fallback:t(()=>e[3]||(e[3]=[d(" Loading... ")])),_:1})),e[9]||(e[9]=o('<h3 id="请求配置选项" tabindex="-1">请求配置选项 <a class="header-anchor" href="#请求配置选项" aria-label="Permalink to &quot;请求配置选项&quot;">​</a></h3><p><code>request()</code> 函数接受一个全面的配置对象：</p><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>用途</th></tr></thead><tbody><tr><td><code>url</code></td><td>字符串</td><td>必需</td><td>API 端点路径</td></tr><tr><td><code>params</code></td><td>对象</td><td><code>null</code></td><td>请求参数</td></tr><tr><td><code>dataType</code></td><td>字符串</td><td><code>form</code></td><td>内容类型（<code>json</code> 或表单）</td></tr><tr><td><code>showLoading</code></td><td>布尔值</td><td><code>true</code></td><td>显示加载指示器</td></tr><tr><td><code>responseType</code></td><td>字符串</td><td><code>json</code></td><td>预期的响应格式</td></tr><tr><td><code>errorCallback</code></td><td>函数</td><td><code>null</code></td><td>自定义错误处理程序</td></tr><tr><td><code>uploadProgressCallback</code></td><td>函数</td><td><code>null</code></td><td>上传进度处理程序</td></tr></tbody></table><p>系统会自动处理 FormData 创建、内容类型标头以及文件上传的进度跟踪。</p><h3 id="认证超时处理" tabindex="-1">认证超时处理 <a class="header-anchor" href="#认证超时处理" aria-label="Permalink to &quot;认证超时处理&quot;">​</a></h3><p>响应拦截器通过响应代码 <code>901</code> 实现自动认证超时检测。检测到超时后，用户将被重定向到登录页面，同时保留当前路由以便认证后导航。</p><h2 id="组件集成模式" tabindex="-1">组件集成模式 <a class="header-anchor" href="#组件集成模式" aria-label="Permalink to &quot;组件集成模式&quot;">​</a></h2><p>核心架构组件通过定义良好的集成模式协同工作，确保应用程序的行为一致。</p><h3 id="框架-路由集成" tabindex="-1">框架 - 路由集成 <a class="header-anchor" href="#框架-路由集成" aria-label="Permalink to &quot;框架 - 路由集成&quot;">​</a></h3>',9)),(r(),A(n,null,{default:t(()=>[E(a,{id:"mermaid-370",class:"mermaid",graph:"flowchart%20TD%0A%0ARouteWatcher%5B%22%E8%B7%AF%E7%94%B1%E7%9B%91%E5%90%AC%E5%99%A8%22%5D%0ASetMenu%5B%22setMenu()%20%E6%96%B9%E6%B3%95%22%5D%0ACurrentMenu%5B%22currentMenu%20%E5%BC%95%E7%94%A8%22%5D%0AJump%5B%22jump()%20%E6%96%B9%E6%B3%95%22%5D%0ARouteChange%5B%22%E8%B7%AF%E7%94%B1%E6%9B%B4%E6%94%B9%E4%BA%8B%E4%BB%B6%22%5D%0ARouteMeta%5B%22route.meta.menuCode%22%5D%0ARouterPush%5B%22router.push()%22%5D%0AMenusArray%5B%22menus%20%E9%85%8D%E7%BD%AE%22%5D%0AFilteredMenus%5B%22filteredMenus%20%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%22%5D%0AMenuClick%5B%22%E8%8F%9C%E5%8D%95%E7%82%B9%E5%87%BB%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%22%5D%0A%0A%20%20%20%20RouteChange%20--%3E%20RouteWatcher%0A%20%20%20%20RouteWatcher%20--%3E%20RouteMeta%0A%20%20%20%20RouteMeta%20--%3E%20SetMenu%0A%20%20%20%20MenuClick%20--%3E%20Jump%0A%20%20%20%20Jump%20--%3E%20RouterPush%0Asubgraph%20Menu_System%20%5B%22%E8%8F%9C%E5%8D%95%E7%B3%BB%E7%BB%9F%22%5D%0A%20%20%20%20MenusArray%0A%20%20%20%20FilteredMenus%0A%20%20%20%20MenuClick%0A%20%20%20%20MenusArray%20--%3E%20FilteredMenus%0A%20%20%20%20FilteredMenus%20--%3E%20MenuClick%0Aend%0A%0Asubgraph%20Router_System%20%5B%22%E8%B7%AF%E7%94%B1%E7%B3%BB%E7%BB%9F%22%5D%0A%20%20%20%20RouteChange%0A%20%20%20%20RouteMeta%0A%20%20%20%20RouterPush%0A%20%20%20%20RouterPush%20--%3E%20RouteChange%0Aend%0A%0Asubgraph%20Framework_Component%20%5B%22%E6%A1%86%E6%9E%B6%E7%BB%84%E4%BB%B6%22%5D%0A%20%20%20%20RouteWatcher%0A%20%20%20%20SetMenu%0A%20%20%20%20CurrentMenu%0A%20%20%20%20Jump%0A%20%20%20%20SetMenu%20--%3E%20CurrentMenu%0Aend%0A"})]),fallback:t(()=>e[4]||(e[4]=[d(" Loading... ")])),_:1})),e[10]||(e[10]=o('<h3 id="框架-请求集成" tabindex="-1">框架 - 请求集成 <a class="header-anchor" href="#框架-请求集成" aria-label="Permalink to &quot;框架 - 请求集成&quot;">​</a></h3><p>Framework 组件通过多个接触点与 Request 工具集成：</p><ul><li><strong>空间使用更新</strong>：<code>getUseSpace()</code> 调用使用 Request 系统，<code>showLoading: false</code></li><li><strong>用户认证</strong>：注销功能使用 Request 进行 API 通信</li><li><strong>子组件通信</strong>：文件上传回调触发空间使用刷新</li></ul><p>这种集成确保了所有由 Framework 发起的 API 调用的加载状态、错误处理和认证管理的一致性。</p>',4))])}const F=s(B,[["render",c]]);export{R as __pageData,F as default};
