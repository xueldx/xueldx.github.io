import{_ as d,C as E,c as h,o as e,a8 as i,b as t,w as a,a as l,G as p,a9 as o}from"./chunks/framework.DW4T_yAZ.js";const D=JSON.parse('{"title":"全局状态管理方案","description":"","frontmatter":{},"headers":[],"relativePath":"projects/QuickSurvey-fe/State-Management/State-Management.md","filePath":"projects/QuickSurvey-fe/State-Management/State-Management.md","lastUpdated":1749448992000}'),r={name:"projects/QuickSurvey-fe/State-Management/State-Management.md"};function c(k,s,A,B,g,u){const n=E("Mermaid");return e(),h("div",null,[s[3]||(s[3]=i('<h1 id="全局状态管理方案" tabindex="-1">全局状态管理方案 <a class="header-anchor" href="#全局状态管理方案" aria-label="Permalink to &quot;全局状态管理方案&quot;">​</a></h1><h2 id="概述" tabindex="-1"><code>概述</code> <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;`概述`&quot;">​</a></h2><p><code>问卷小筑</code>使用 <code>Redux</code> 进行状态管理，这是一个<code>集中式</code>状态管理解决方案。本节将详细介绍状态管理的<code>实现方式</code>和<code>数据流</code>。</p><h2 id="状态结构" tabindex="-1"><code>状态结构</code> <a class="header-anchor" href="#状态结构" aria-label="Permalink to &quot;`状态结构`&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">状态管理分为三个主要部分：</p><ol><li>用户状态 (userReducer) <ul><li>包含用户认证和个人资料信息</li><li>主要字段：<code>username</code>、<code>nickname</code></li></ul></li><li>组件状态 (componentsReducer) <ul><li>管理问卷中的组件，包括： <ul><li><code>selectedId</code>：当前选中的组件</li><li><code>componentList</code>：问卷中的组件数组</li><li><code>copiedComponent</code>：当前复制的组件（用于复制/粘贴操作）</li></ul></li><li>使用 <code>redux-undo</code> 增强，提供<code>撤销/重做</code>功能</li></ul></li><li>页面信息状态 (pageInfoReducer) <ul><li>存储问卷元数据，如标题、描述、CSS、JS 和发布状态</li><li>主要字段：<code>title</code>、<code>desc</code>、<code>css</code>、<code>js</code>、<code>isPublished</code></li></ul></li></ol></div><h2 id="组件数据模型" tabindex="-1"><code>组件数据模型</code> <a class="header-anchor" href="#组件数据模型" aria-label="Permalink to &quot;`组件数据模型`&quot;">​</a></h2><p>组件系统基于灵活的数据模型，支持<code>不同类型</code>的问卷组件：</p>',7)),(e(),t(o,null,{default:a(()=>[p(n,{id:"mermaid-90",class:"mermaid",graph:"classDiagram%0A%20%20%20%20class%20ComponentInfoType%20%7B%0A%20%20%20%20%20%20%20%20fe_id%3A%20string%0A%20%20%20%20%20%20%20%20title%3A%20string%0A%20%20%20%20%20%20%20%20type%3A%20string%0A%20%20%20%20%20%20%20%20isHidden%3F%3A%20boolean%0A%20%20%20%20%20%20%20%20isLocked%3F%3A%20boolean%0A%20%20%20%20%20%20%20%20props%3A%20ComponentPropsType%0A%20%20%20%20%7D%0A%20%20%20%20class%20ComponentsStateType%20%7B%0A%20%20%20%20%20%20%20%20selectedId%3A%20string%0A%20%20%20%20%20%20%20%20componentList%3A%20ComponentInfoType%5B%5D%0A%20%20%20%20%20%20%20%20copiedComponent%3A%20ComponentInfoType%20%7C%20null%0A%20%20%20%20%7D%0A%20%20%20%20ComponentsStateType%20--%3E%20ComponentInfoType%20%3A%20contains%5B%5D%0A"})]),fallback:a(()=>s[0]||(s[0]=[l(" Loading... ")])),_:1})),s[4]||(s[4]=i(`<h2 id="组件操作" tabindex="-1"><code>组件操作</code> <a class="header-anchor" href="#组件操作" aria-label="Permalink to &quot;\`组件操作\`&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">组件状态管理器提供多种操作组件的动作：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resetComponents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//重置组件状态，用于加载新问卷时初始化组件列表和选中状态。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">changeSelectedId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//改变当前选中的组件 ID，用于在用户点击组件时更新选中状态。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//添加新组件到组件列表中，当用户从组件库中选择一个组件添加到画布时使用。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">changeComponentProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//修改组件的属性，当用户在右侧面板中调整组件属性时使用。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeSelectedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除当前选中的组件，同时会自动选择下一个合适的组件。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">changeComponentHidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//切换组件的显示/隐藏状态，同时会更新选中的组件 ID。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toggleComponentLocked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//切换组件的锁定状态，锁定后组件不能被编辑。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copySelectedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//复制当前选中的组件到剪贴板（实际上是存储在 Redux 状态中）。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pasteCopiedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 粘贴之前复制的组件，会为新组件生成一个新的唯一 ID。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectPrevComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//选择组件列表中的上一个组件，用于键盘导航。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectNextComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//选择组件列表中的下一个组件，用于键盘导航。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">changeComponentTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//修改组件的标题。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moveComponentList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//移动组件在列表中的位置，用于拖拽重新排序组件。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></div><h4 id="数据流架构" tabindex="-1"><code>数据流架构</code> <a class="header-anchor" href="#数据流架构" aria-label="Permalink to &quot;\`数据流架构\`&quot;">​</a></h4><p>以下图表说明了数据如何在应用中流动：</p>`,4)),(e(),t(o,null,{default:a(()=>[p(n,{id:"mermaid-103",class:"mermaid",graph:"sequenceDiagram%0A%20%20participant%20%E7%94%A8%E6%88%B7%0A%20%20participant%20React%20%E7%BB%84%E4%BB%B6%0A%20%20participant%20Redux%20Store%0A%20%20participant%20Redux%20actions%0A%20%20participant%20API%20%E6%9C%8D%E5%8A%A1%0A%20%20participant%20%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%0A%0A%20%20%E7%94%A8%E6%88%B7-%3E%3EReact%20%E7%BB%84%E4%BB%B6%3A%20%E4%BA%A4%E4%BA%92%EF%BC%88%E7%82%B9%E5%87%BB%E3%80%81%E8%BE%93%E5%85%A5%E7%AD%89%EF%BC%89%0A%20%20React%20%E7%BB%84%E4%BB%B6-%3E%3ERedux%20actions%3A%20%E6%B4%BE%E5%8F%91%E5%8A%A8%E4%BD%9C%0A%20%20loop%20%5B%E7%9B%B4%E6%8E%A5%E7%8A%B6%E6%80%81%E6%9B%B4%E6%96%B0%5D%0A%20%20%20%20Redux%20actions-%3E%3ERedux%20Store%3A%20%E6%9B%B4%E6%96%B0%E7%8A%B6%E6%80%81%0A%20%20%20%20Redux%20Store--%3E%3EReact%20%E7%BB%84%E4%BB%B6%3A%20%E4%BD%BF%E7%94%A8%E6%96%B0%E7%8A%B6%E6%80%81%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93%0A%20%20%20%20Redux%20actions-%3E%3EAPI%20%E6%9C%8D%E5%8A%A1%3A%20%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1%0A%20%20%20%20API%20%E6%9C%8D%E5%8A%A1-%3E%3E%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%3A%20HTTP%20%E8%AF%B7%E6%B1%82%0A%20%20%20%20%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8--%3E%3EAPI%20%E6%9C%8D%E5%8A%A1%3A%20%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%0A%20%20%20%20API%20%E6%9C%8D%E5%8A%A1-%3E%3ERedux%20actions%3A%20%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94%0A%20%20%20%20Redux%20actions-%3E%3ERedux%20Store%3A%20%E6%9B%B4%E6%96%B0%E7%8A%B6%E6%80%81%0A%20%20%20%20Redux%20Store--%3E%3EReact%20%E7%BB%84%E4%BB%B6%3A%20%E4%BD%BF%E7%94%A8%E6%96%B0%E7%8A%B6%E6%80%81%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93%0A%20%20end%0A"})]),fallback:a(()=>s[1]||(s[1]=[l(" Loading... ")])),_:1})),s[5]||(s[5]=i('<h3 id="加载问卷数据" tabindex="-1"><code>加载问卷数据</code> <a class="header-anchor" href="#加载问卷数据" aria-label="Permalink to &quot;`加载问卷数据`&quot;">​</a></h3><p>从<code>后端</code>加载问卷数据并<code>更新</code>到对应的 <code>Store</code> 中，实现<code>全局状态共享</code>：</p>',2)),(e(),t(o,null,{default:a(()=>[p(n,{id:"mermaid-110",class:"mermaid",graph:"flowchart%20TD%0A%0AStart%5B%22%E7%BB%84%E4%BB%B6%E6%8C%82%E8%BD%BD%20%2F%20ID%20%E6%9B%B4%E6%94%B9%22%5D%0AGetId%5B%22%E4%BB%8E%20URL%20%E5%8F%82%E6%95%B0%E8%8E%B7%E5%8F%96%E9%97%AE%E5%8D%B7%20ID%22%5D%0ACallAPI%5B%22%E4%BD%BF%E7%94%A8%20ID%20%E8%B0%83%E7%94%A8%20getQuestionService%22%5D%0AProcessData%5B%22%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%22%5D%0ADispatchActions%5B%22%E6%B4%BE%E5%8F%91%20Redux%20actions%22%5D%0AResetComponents%5B%22resetComponents%20action%22%5D%0AResetPageInfo%5B%22resetPagelnfo%20action%22%5D%0AComponentsState%5B%22%E6%9B%B4%E6%96%B0%E7%BB%84%E4%BB%B6%E7%8A%B6%E6%80%81%22%5D%0APageInfoState%5B%22%E6%9B%B4%E6%96%B0%E9%A1%B5%E9%9D%A2%E4%BF%A1%E6%81%AF%E7%8A%B6%E6%80%81%22%5D%0ARerenderUI%5B%22%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93%20UI%20%E7%BB%84%E4%BB%B6%22%5D%0A%0A%20%20%20%20ResetComponents%20--%3E%20ComponentsState%0A%20%20%20%20ResetPageInfo%20--%3E%20PageInfoState%0A%20%20%20%20ComponentsState%20--%3E%20RerenderUI%0A%20%20%20%20PageInfoState%20--%3E%20RerenderUI%0Asubgraph%20UI_Update%20%5B%22UI%20%E6%9B%B4%E6%96%B0%22%5D%0A%20%20%20%20RerenderUI%0Aend%0A%0Asubgraph%20Redux_Store_Update%20%5B%22Redux%20Store%20%E6%9B%B4%E6%96%B0%22%5D%0A%20%20%20%20ComponentsState%0A%20%20%20%20PageInfoState%0Aend%0A%0Asubgraph%20useLoadQuestionData_Hook%20%5B%22useLoadQuestionData%20%E9%92%A9%E5%AD%90%22%5D%0A%20%20%20%20Start%0A%20%20%20%20GetId%0A%20%20%20%20CallAPI%0A%20%20%20%20ProcessData%0A%20%20%20%20DispatchActions%0A%20%20%20%20ResetComponents%0A%20%20%20%20ResetPageInfo%0A%20%20%20%20Start%20--%3E%20GetId%0A%20%20%20%20GetId%20--%3E%20CallAPI%0A%20%20%20%20CallAPI%20--%3E%20ProcessData%0A%20%20%20%20ProcessData%20--%3E%20DispatchActions%0A%20%20%20%20DispatchActions%20--%3E%20ResetComponents%0A%20%20%20%20DispatchActions%20--%3E%20ResetPageInfo%0Aend%0A"})]),fallback:a(()=>s[2]||(s[2]=[l(" Loading... ")])),_:1})),s[6]||(s[6]=i(`<div class="info custom-block"><p class="custom-block-title">当组件挂载或 ID 变化时，<code>useLoadQuestionData</code> hook 会：</p><ol><li>从 URL 参数获取问卷 ID</li><li>调用 <code>getQuestionService</code> 获取问卷数据</li><li>处理响应数据</li><li>分发 Redux actions 更新状态： <ul><li><code>resetComponents</code> 更新组件状态</li><li><code>resetPageInfo</code> 更新页面信息状态</li></ul></li><li>UI 组件根据新状态重新渲染</li></ol></div><h2 id="页面信息状态管理" tabindex="-1"><code>页面信息状态管理</code> <a class="header-anchor" href="#页面信息状态管理" aria-label="Permalink to &quot;\`页面信息状态管理\`&quot;">​</a></h2><p>页面信息状态管理通过 <code>pageInfoReducer</code> 实现 主要功能包括：</p><ul><li><code>resetPageInfo</code>：重置整个页面信息</li><li><code>changeTitle</code>：仅更改标题</li></ul><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //更新页面信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resetPageInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state: PageInfoStateType, action: PayloadAction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PageInfoStateType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> action.payload</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //改变页面标题</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    changeTitle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">draft</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PageInfoStateType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">action</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PayloadAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newTitle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> action.payload</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      draft.title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newTitle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="组件属性管理" tabindex="-1"><code>组件属性管理</code> <a class="header-anchor" href="#组件属性管理" aria-label="Permalink to &quot;\`组件属性管理\`&quot;">​</a></h2><p>组件属性通过 <code>ComponentsProp</code> 组件进行管理</p><div class="info custom-block"><p class="custom-block-title">当用户修改组件属性时：</p><ol><li>子组件触发 <code>onChange</code> 事件并传递新属性</li><li><code>ComponentsProp</code> 组件接收新属性并分发 <code>changeComponentProps</code> action</li><li>Redux 更新状态</li><li>UI 组件重新渲染以反映变化</li></ol></div><h2 id="总结" tabindex="-1"><code>总结</code> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;\`总结\`&quot;">​</a></h2><p>问卷小筑的状态管理采用了<code>结构化</code>的方法，具有明确的关注点分离。<code>Redux store</code> 管理应用程序状态，<code>React 组件</code>处理 UI，服务模块与<code>后端 API</code> 交互。基于组件的架构和集中式状态管理使应用程序<code>易于维护和扩展</code>。</p>`,10))])}const y=d(r,[["render",c]]);export{D as __pageData,y as default};
